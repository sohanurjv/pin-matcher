/**
 * I made both the text fields disabled so that the user can't  mess with the input and
 * output values. 
 */
let generatorText = document.getElementById('generatorText'); // the textbox above gererator button
let userText = document.getElementById('userText'); // The text box above user input buttons.
let triesLeft = document.getElementById('triesLeft');  // The tries left text below user buttons.
let notifyMatched = document.getElementById('matched').style;  // toast notification text matched
let notifyNotMatched = document.getElementById('notMatched').style; // toast notification text not matched

/**(i) pin :number generated by the generator button.
 * (ii) userInput: The number that the user has given input
 * (iii) tries: Counter for how many tries left.
 */
var pin = 0, userInput = '', tries = 4; isGeneratorCalled = false;


/**The reset function resets all the variables if the parameter valeu === 'all'
 * otherwise (even without any parameter) this function only resets the userInput.
 */
function reset(value){
  if(value === 'all'){
    generatorText.value = '';
    userText.value = '';
    userInput = '';
    pin = '';
    isGeneratorCalled = false;
  }
  else{
    userInput = '';
    userText.value = '';
  }
}


/**The generate() function get activated when the user clicks on the generate button. */
function generate(value){
  notifyMatched.display = 'none';
  notifyNotMatched.display = 'none';
  reset('all');
  tries = 4;
  triesLeft.innerText = '4 tries left';
  while(pin < 1000){
    pin = (Math.floor(Math.random() * 10000));
  }
  generatorText.value = pin;
  isGeneratorCalled = true;
}


/**The isValid() function compares the userInput with the randomly generated pin */
function isValid(){
    if((''+pin) === userInput && tries !== 0){
      reset('all');
      triesLeft.innerText = '';
      notifyMatched.display = 'block';
    }
    else if(tries === 0){
      triesLeft.innerText = 'No more tries left';
      reset('all');
      notifyNotMatched.display = 'block';
    }
    else{
      reset();
      notifyNotMatched.display = 'block';
      triesLeft.innerText = `${tries} tries left`;
    }
}



  // envent delegation function.
   document.getElementById('buttons').addEventListener('click', event => {
    let value = event.target.innerText;
    notifyNotMatched.display = 'none';
    if((value.length === 1 || value.length === 6) && pin !== '' && isGeneratorCalled){
      takeUserInput(value);
    }
  });


  /**takeUserInput() function takes input from the user and performs certain action depending on 
    *different inputs.
    *if the value(input from event delegation) is not C(clear), <(backspace), or Submit then register then
    *it assigns the value to the global userInput variable.
  */ 
  function takeUserInput(value){
   if(value !== 'Submit' && value !== '<' && value !== 'C' && userInput.length < 4){
     userInput += value;
     print();
   }
   else{
     switch(value){
       case 'Submit':  // if the submit button is pressed then call the isValid() function
                       // to check whether the userInput is valid or not.
                       tries--;
                       isValid();
                       break;
       case '<':       // backspace statement.
                       if(userInput.length > 0){
                         userInput = userInput.substr(0, userInput.length -1); 
                         print();
                       }
                       break;
       case 'C':       // delets all the userInput
                       reset();
     }
   }

   function print(){  // prints the real time userInput value.
    userText.value = userInput;
  }

  }  // end function registerInput();
  